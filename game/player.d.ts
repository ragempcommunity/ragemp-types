declare interface GamePlayerLegacy {
	reserveEntityExplodesOnHighExplosionCombo(p1: number): void;
	playerAttachVirtualBound(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
}

declare interface GetPlayerRgbColourResult {
	r: number;
	g: number;
	b: number;
}

declare interface GetPlayerParachuteSmokeTrailColorResult {
	r: number;
	g: number;
	b: number;
}

declare interface GamePlayerUnk {
	_0x7E07C78925D5FD96(p0: number): number;
	_0xDE45D1A1EF45EE61(toggle: boolean): void;
	_0xC3376F42B1FACCC6(): void;
	_0xFAC75988A7D078D3(): void;
	_0x49B856B1360C47C7(p0: number, p1: number, p2: number): void;
	_0x823EC8E82BA45986(p0: number): void;
	_0xBC9490CA15AEA8FB(): void;
	_0x4669B3ED80F24B4E(): void;
	_0x2F41A3BAE005E5FA(p0: number, p1: number): void;
	_0xAD73CE5A09E42D12(): void;
	_0x36F1B38855F2A8DF(): void;
	_0xB45EFF719D8427A6(p0: number): void;
	_0x0032A6DBA562C518(): void;
	_0xDCC07526B8EC45AF(): boolean;
	_0xCAC57395B151135F(p1: boolean): void;
	_0xB9CF1F793A9F1BF1(): boolean;
	_0xCB645E85E97EA48B(): boolean;
	_0xB885852C39CC265D(): void;
	_0xFFEE8FA29AB9A18E(p1: number): void;
	_0x5FC472C501CCADB3(): boolean;
	_0xF10B44FD479D69F3(p1: number): boolean;
	_0xDD2620B7B9D16FF1(p1: number): boolean;
	_0x8D768602ADEF2245(p1: number): void;
	_0xD821056B9ACF8052(p0: number, p1: number): void;
	_0x31E90B8873A4CD3B(p0: number, p1: number): void;
	_0x690A61A6D13583F6(): boolean;
	_0x9EDD76E87D5D51BA(): void;
	_0xBC0753C9CA14B506(p1: number, p2: boolean): boolean;
	_0x2F7CEB6520288061(p0: boolean): void;
	_0x5501B7A5CDB79D37(): void;
	_0x55FCC0C390620314(p0: number, p1: number, p2: number): void;
	_0x2382AB11450AE7BA(p0: number, p1: number): void;
	_0x6E4361FF3E8CD7CA(p0: number): number;
	_0x237440E46D918649(p0: number): void;
	_0x9097EB6D4BB9A12A(entity: number): void;
	_0x9F260BFB59ADBCA3(entity: number): void;
	_0x7BAE68775557AE0B(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	_0x7148E0F43D11F0D9(): void;
	_0x70A382ADEC069DD3(coordX: number, coordY: number, coordZ: number): void;
}

declare interface GamePlayer extends GamePlayerLegacy {
	getPed(): number;
	getPedScriptIndex(): number;
	setModel(model: number): void;
	changePed(ped: number, p2: boolean, resetDamage: boolean): void;
	getRgbColour(): GetPlayerRgbColourResult;
	getNumberOfS(): number;
	getTeam(): number;
	setTeam(team: number): void;
	getNumberOfPlayersInTeam(team: number): number;
	getName(): string;
	getWantedLevelRadius(): number;
	getWantedCentrePosition(): Vector3;
	setWantedCentrePosition(p2: boolean, p3: boolean): Vector3;
	getWantedLevelThreshold(wantedLevel: number): number;
	setWantedLevel(wantedLevel: number, disableNoMission: boolean): void;
	setWantedLevelNoDrop(wantedLevel: number, p2: boolean): void;
	setWantedLevelNow(p1: boolean): void;
	areFlashingStarsAboutToDrop(): boolean;
	areStarsGreyedOut(): boolean;
	setDispatchCopsFor(toggle: boolean): void;
	isWantedLevelGreater(wantedLevel: number): boolean;
	clearWantedLevel(): void;
	isDead(): boolean;
	isPressingHorn(): boolean;
	setControl(bHasControl: boolean, flags: number): void;
	getWantedLevel(): number;
	setMaxWantedLevel(maxWantedLevel: number): void;
	setPoliceRadarBlips(toggle: boolean): void;
	setPoliceIgnore(toggle: boolean): void;
	isPlaying(): boolean;
	setEveryoneIgnore(toggle: boolean): void;
	setAllRandomPedsFlee(toggle: boolean): void;
	setAllRandomPedsFleeThisFrame(): void;
	setIgnoreLowPriorityShockingEvents(toggle: boolean): void;
	setWantedLevelMultiplier(multiplier: number): void;
	setWantedLevelDifficulty(difficulty: number): void;
	resetWantedLevelDifficulty(): void;
	startFiringAmnesty(duration: number): void;
	reportCrime(crimeType: number, wantedLvlThresh: number): void;
	switchCrimeType(p1: number): void;
	reportPoliceSpotted(): void;
	canStartMission(): boolean;
	isReadyForCutscene(): boolean;
	isTargettingEntity(entity: number): boolean;
	getTargetEntity(): number;
	isFreeAiming(): boolean;
	isFreeAimingAtEntity(entity: number): boolean;
	setLockonRangeOverride(range: number): void;
	setCanDoDriveBy(toggle: boolean): void;
	setCanBeHassledByGangs(toggle: boolean): void;
	setCanUseCover(toggle: boolean): void;
	getMaxWantedLevel(): number;
	isTargettingAnything(): boolean;
	setSprint(toggle: boolean): void;
	resetStamina(): void;
	restoreStamina(p1: number): void;
	getSprintStaminaRemaining(): number;
	getSprintTimeRemaining(): number;
	getUnderwaterTimeRemaining(): number;
	setUnderwaterTimeRemaining(time: number): number;
	getGroup(): number;
	getMaxArmour(): number;
	isControlOn(): boolean;
	isCamControlDisabled(): boolean;
	isScriptControlOn(): boolean;
	isClimbing(): boolean;
	isBeingArrested(atArresting: boolean): boolean;
	resetArrestState(): void;
	getPlayersLastVehicle(): number;
	getIndex(): number;
	intToIndex(value: number): number;
	intToParticipantindex(value: number): number;
	getTimeSinceHitVehicle(): number;
	getTimeSinceHitPed(): number;
	getTimeSinceDroveOnPavement(): number;
	getTimeSinceDroveAgainstTraffic(): number;
	isFreeForAmbientTask(): boolean;
	id(): number;
	pedId(): number;
	networkIdToInt(): number;
	hasForceCleanupOccurred(cleanupFlags: number): boolean;
	forceCleanup(cleanupFlags: number): void;
	forceCleanupForAllThreadsWithThisName(name: string, cleanupFlags: number): void;
	forceCleanupForThreadWithThisId(id: number, cleanupFlags: number): void;
	getCauseOfMostRecentForceCleanup(): number;
	setMayOnlyEnterThisVehicle(vehicle: number): void;
	setMayNotEnterAnyVehicle(): void;
	giveAchievementTo(achievement: number): boolean;
	setAchievementProgress(achievement: number, progress: number): boolean;
	getAchievementProgress(achievement: number): number;
	hasAchievementBeenPassed(achievement: number): boolean;
	isOnline(): boolean;
	isLoggingInNp(): boolean;
	displaySystemSigninUi(unk: boolean): void;
	isSystemUiBeingDisplayed(): boolean;
	setInvincible(toggle: boolean): void;
	getInvincible(): boolean;
	setInvincibleKeepRagdollEnabled(toggle: boolean): void;
	removeHelmet(p2: boolean): void;
	giveRagdollControl(toggle: boolean): void;
	setLockon(toggle: boolean): void;
	setTargetingMode(targetMode: number): void;
	setTargetLevel(targetLevel: number): void;
	clearHasDamagedAtLeastOnePed(): void;
	hasDamagedAtLeastOnePed(): boolean;
	clearHasDamagedAtLeastOneNonAnimalPed(): void;
	hasDamagedAtLeastOneNonAnimalPed(): boolean;
	setAirDragMultiplierForPlayersVehicle(multiplier: number): void;
	setSwimMultiplierFor(multiplier: number): void;
	setRunSprintMultiplierFor(multiplier: number): void;
	getTimeSinceLastArrest(): number;
	getTimeSinceLastDeath(): number;
	assistedMovementCloseRoute(): void;
	assistedMovementFlushRoute(): void;
	setForcedAim(toggle: boolean): void;
	setForcedZoom(toggle: boolean): void;
	setForceSkipAimIntro(toggle: boolean): void;
	disableFiring(toggle: boolean): void;
	setDisableAmbientMeleeMove(toggle: boolean): void;
	setMaxArmour(value: number): void;
	specialAbilityActivate(p0: number, p1: number): void;
	setSpecialAbility(p1: number, p2: number): void;
	specialAbilityDeplete(p0: number, p1: number): void;
	specialAbilityDeactivate(p1: number): void;
	specialAbilityDeactivateFast(p1: number): void;
	specialAbilityReset(p1: number): void;
	specialAbilityChargeOnMissionFailed(p1: number): void;
	specialAbilityChargeSmall(p1: boolean, p2: boolean, p3: number): void;
	specialAbilityChargeMedium(p1: boolean, p2: boolean, p3: number): void;
	specialAbilityChargeLarge(p1: boolean, p2: boolean, p3: number): void;
	specialAbilityChargeContinuous(p1: number, p2: number): void;
	specialAbilityChargeAbsolute(p1: number, p2: boolean, p3: number): void;
	specialAbilityChargeNormalized(normalizedValue: number, p2: boolean, p3: number): void;
	specialAbilityFillMeter(p1: boolean, p2: number): void;
	specialAbilityDepleteMeter(p1: boolean, p2: number): void;
	specialAbilityLock(playerModel: number, p1: number): void;
	specialAbilityUnlock(playerModel: number, p1: number): void;
	isSpecialAbilityUnlocked(playerModel: number): boolean;
	isSpecialAbilityActive(p1: number): boolean;
	isSpecialAbilityMeterFull(p1: number): boolean;
	enableSpecialAbility(toggle: boolean, p2: number): void;
	isSpecialAbilityEnabled(p1: number): boolean;
	setSpecialAbilityMultiplier(multiplier: number): void;
	startTeleport(x: number, y: number, z: number, heading: number, p5: boolean, findCollisionLand: boolean, p7: boolean): void;
	updateTeleport(): boolean;
	stopTeleport(): void;
	isTeleportActive(): boolean;
	getCurrentStealthNoise(): number;
	getEntityIsFreeAimingAt(): EntityMp | number | undefined;
	setHealthRechargeMultiplier(regenRate: number): void;
	getHealthRechargeLimit(): number;
	setHealthRechargeLimit(limit: number): void;
	setFallDistance(p0: number, p1: number): void;
	setWeaponDamageModifier(modifier: number): void;
	setWeaponDefenseModifier(modifier: number): void;
	setWeaponDefenseModifier2(modifier: number): void;
	setMeleeWeaponDamageModifier(modifier: number, p2: boolean): void;
	setMeleeWeaponDefenseModifier(modifier: number): void;
	setVehicleDamageModifier(modifier: number): void;
	setVehicleDefenseModifier(modifier: number): void;
	setParachuteTintIndex(tintIndex: number): void;
	getParachuteTintIndex(): number;
	setReserveParachuteTintIndex(index: number): void;
	getReserveParachuteTintIndex(): number;
	setParachutePackTintIndex(tintIndex: number): void;
	getParachutePackTintIndex(): number;
	setHasReserveParachute(): void;
	getHasReserveParachute(): boolean;
	setCanLeaveParachuteSmokeTrail(enabled: boolean): void;
	setParachuteSmokeTrailColor(r: number, g: number, b: number): void;
	getParachuteSmokeTrailColor(): GetPlayerParachuteSmokeTrailColorResult;
	setResetFlagPreferRearSeats(flags: number): void;
	setNoiseMultiplier(multiplier: number): void;
	setSneakingNoiseMultiplier(multiplier: number): void;
	canPedHear(ped: number): boolean;
	simulateInputGait(amount: number, gaitType: number, speed: number, p4: boolean, p5: boolean): void;
	resetInputGait(): void;
	setAutoGiveParachuteWhenEnterPlane(toggle: boolean): void;
	setAutoGiveScubaGearWhenExitVehicle(toggle: boolean): void;
	setStealthPerceptionModifier(value: number): void;
	setSimulateAiming(toggle: boolean): void;
	setClothPinFrames(p1: number): void;
	setClothPackageIndex(index: number): void;
	setClothLockCounter(value: number): void;
	attachVirtualBound(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
	detachVirtualBound(): void;
	hasBeenSpottedInStolenVehicle(): boolean;
	isBattleAware(): boolean;
	extendWorldBoundaryFor(x: number, y: number, z: number): void;
	resetWorldBoundaryFor(): void;
	isRidingTrain(): boolean;
	hasLeftTheWorld(): boolean;
	setLeavePedBehind(toggle: boolean): void;
	setParachuteVariationOverride(p1: number, p2: number, p3: number, p4: boolean): void;
	clearParachuteVariationOverride(): void;
	setParachuteModelOverride(model: number): void;
	clearParachuteModelOverride(): void;
	setParachutePackModelOverride(model: number): void;
	clearParachutePackModelOverride(): void;
	disableVehicleRewards(): void;
	setBluetoothState(state: boolean): void;
	isBluetoothEnable(): boolean;
	getFakeWantedLevel(): number;
	setHomingRocketDisabled(p0: number, p1: number): void;

	unk: GamePlayerUnk;
}

declare interface GamePlayerMp extends GamePlayer {}
